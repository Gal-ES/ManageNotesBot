import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
import sqlite3
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7788934089:AAG18zRX9cYwgry8iFGhCzCisbOPL3Blwgc'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect('notes.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
cursor.execute('''
CREATE TABLE IF NOT EXISTS notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    note_text TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class NoteStates(StatesGroup):
    add_note = State()
    delete_note = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")],
            [InlineKeyboardButton(text="üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="view_notes")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="delete_note")]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üìö <b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏.</b>\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.callback_query(lambda c: c.data == 'add_note')
async def add_note_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(NoteStates.add_note)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
@dp.message(NoteStates.add_note)
async def process_note_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    note_text = message.text
    
    cursor.execute(
        "INSERT INTO notes (user_id, note_text) VALUES (?, ?)",
        (user_id, note_text)
    )
    conn.commit()
    
    await message.answer(
        "‚úÖ <b>–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>",
        reply_markup=get_main_menu()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏"
@dp.callback_query(lambda c: c.data == 'view_notes')
async def view_notes_handler(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    
    cursor.execute(
        "SELECT note_text, created_at FROM notes "
        "WHERE user_id = ? ORDER BY created_at DESC",
        (user_id,)
    )
    notes = cursor.fetchall()
    
    if not notes:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        response = ["<b>üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:</b>", ""]
        for i, (text, created_at) in enumerate(notes, 1):
            response.append(f"{i}. {text}")
            response.append(f"<i>–°–æ–∑–¥–∞–Ω–æ: {created_at}</i>")
            response.append("")
        
        await callback.message.answer("\n".join(response))
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.callback_query(lambda c: c.data == 'delete_note')
async def delete_note_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    
    cursor.execute(
        "SELECT id, note_text FROM notes "
        "WHERE user_id = ? ORDER BY created_at DESC",
        (user_id,)
    )
    notes = cursor.fetchall()
    
    if not notes:
        await callback.message.answer(
            "‚ùå –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_main_menu()
        )
        return
    
    keyboard = []
    for note_id, note_text in notes:
        text = note_text[:25] + "..." if len(note_text) > 25 else note_text
        keyboard.append([InlineKeyboardButton(
            text=f"üóë {text}",
            callback_data=f"delete_{note_id}"
        )])
    
    keyboard.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="cancel_delete"
    )])
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(NoteStates.delete_note)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(StateFilter(NoteStates.delete_note), lambda c: c.data.startswith('delete_'))
async def delete_selected_note(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    note_id = callback.data.split('_')[1]
    
    cursor.execute("DELETE FROM notes WHERE id = ?", (note_id,))
    conn.commit()
    
    await callback.message.answer(
        "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=get_main_menu()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(StateFilter(NoteStates.delete_note), lambda c: c.data == 'cancel_delete')
async def cancel_delete(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unknown(message: types.Message):
    await message.answer(
        "ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=get_main_menu()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())